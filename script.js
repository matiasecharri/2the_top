//ADD
const pluser = (num1, num2) => {
  return num1 + num2;
};

let resultado = pluser(85, 4);
console.log("游녢 This is the plus function");
console.log(`Your result is ${resultado}.`);

//EVEN & ODD, USING AN OBJECT TO RETURN 2 DIFFERENT ARRAYS ;)
const randomNumbers = [
  2, 434, 65765, 6, 24, 100, 22, 23, 7, 4, 17, 8, 29, 12, 31, 16, 23, 6, 39, 10,
  21, 14, 35, 2, 27, 18, 33, 22, 37,
];

const numberClasifier = (array) => {
  const oddNumbers = [];
  const evenNumbers = [];
  const numberPackager = {
    oddNumbers,
    evenNumbers,
  };
  array.filter((x) => {
    if (x % 2 === 0) {
      evenNumbers.push(x);
    }
    if (x % 2 !== 0) {
      oddNumbers.push(x);
    }
  });
  return numberPackager;
};
console.log("游녢 This is the even/odd function");
console.log(numberClasifier(randomNumbers));

//Vocal Counter
//ARRAY DE VOCALES, PALABRA A CONTAR, LOOP, CONTADOR DE LETRAS
const vocalCounter = (word) => {
  const vocals = ["a", "e", "i", "o", "u"];
  let counterCount = 0;
  for (let i = 0; i < word.length; i++) {
    const caracter = word[i].toLowerCase();
    if (vocals.includes(caracter)) {
      counterCount++;
    }
  }
  return counterCount;
};
console.log("游녢 This is the vocalCounter function");
console.log(`Your word has: ${vocalCounter("pAAAasdn")} vocals.`);

// Encuentra el n칰mero m치s grande: Escribe una funci칩n que reciba un array de n칰meros y devuelva el n칰mero m치s grande.
//Necesito un array, un recorrido, un array a clasificar
const numerosArray = [8, 5, 10, 11, 45654];
const bigFinder = (array) => {
  const theBigOne = array.sort((a, b) => b - a);
  const finalNumber = theBigOne[0];
  return finalNumber;
};
console.log("游녢 This is the big number function");
console.log(`The biggest number is: ${bigFinder(numerosArray)}.`);

// Invertir una cadena: Escribe una funci칩n que reciba una cadena de texto y devuelva una nueva cadena con los caracteres invertidos.

let whereAreTheTurtles = "Where are the turtles?";
const reverseFlash = (text) => {
  let textToArray = text.split("");
  let reversing = textToArray.reverse();
  let backToText = reversing.join("");
  return backToText;
};
console.log("游녢 This is the string reverse function");
console.log(
  `Your word/phrase BUT reversed is: ${reverseFlash(whereAreTheTurtles)}.`
);

// Verificar pal칤ndromo: Escribe una funci칩n que reciba una cadena de texto y determine si es un pal칤ndromo (se lee igual de izquierda a derecha y de derecha a izquierda).

// Calcular factorial: Escribe una funci칩n que reciba un n칰mero y calcule su factorial (el producto de todos los n칰meros enteros positivos desde 1 hasta ese n칰mero).

// Eliminar duplicados: Escribe una funci칩n que reciba un array y elimine los elementos duplicados, devolviendo un nuevo array sin duplicados.
//new Set

// Comprobar n칰mero primo: Escribe una funci칩n que reciba un n칰mero y determine si es un n칰mero primo (es divisible 칰nicamente por 1 y por s칤 mismo).

// Contar palabras: Escribe una funci칩n que reciba una cadena de texto y devuelva el n칰mero de palabras que contiene.

// Ordenar n칰meros: Escribe una funci칩n que reciba un array de n칰meros y devuelva un nuevo array con los n칰meros ordenados de menor a mayor.

//Habbo bebe
/*
console.log("游녢 This is the Habbo translator function");
const habboBebe = (word) => {
  let palabraTransformada = word.toLowerCase().split("");
  arrayHabbo = palabraTransformada.map((x) => {
    if (x === "o") {
      return "u";
    } else if (x === "l") {
      return "d";
    } else {
      return x;
    }
  });
  let arrayFiltrado = arrayHabbo.filter((x) => {
    if (x !== "h") {
      return x;
    }
  });
  let habboBebeWord = arrayFiltrado.join("");
  return habboBebeWord;
};

alert(`Habr치 querido decir: ${habboBebe(prompt())}`);

const toby = {
  name: "Toby",
  lastName: "Flenderson",
  age: 41,
  hobbies: ["Being a boring person", "Anti-fun", "Silence"],
  married: false,
  contact: {
    email: "tobydundermifflin@gmail.com",
    twitter: "@tobyflender",
    movil: null,
  },
  getFired: () => {
    console.log("You are fired Toby");
  },
  identity: function () {
    console.log(
      `Hi my name is ${this.name} ${this.lastName} and this is my email :) ${
        this.contact.email
      } sometimes people say that Im ${this.hobbies[1].toLowerCase()} but I just enjoy the ${this.hobbies[2].toLowerCase()} :)`
    );
  },
};

toby.identity();

console.log(Object.keys(toby));

let edad = 17;
let eresMayor = edad >= 18 ? "Eres mayor de edad" : "Eres menor de edad";
console.log(eresMayor);

let dia = 2;
switch (dia) {
  case 0:
    console.log("Domingo");
    break;
  case 1:
    console.log("Lunes");
    break;
  case 2:
    console.log("Martes");
    break;
  default:
    console.log("No tenemos ese d칤a");
    break;
}

try {
  let nombre1 = prompt();
  if (!isNaN(nombre1)) {
    alert("nombre1 needs to be a string");
    throw new Error("nombre1 needs to be a string");
  }
  console.log(nombre1);
} catch (error) {
  console.log(error);
} */

const frutitas = [
  "Manzana",
  "Pl치tano",
  "Naranja",
  "Uva",
  "Fresa",
  "Pi침a",
  "Mango",
  "Sand칤a",
  "Pera",
  "Mel칩n",
  "Kiwi",
  "Durazno",
  "Cereza",
  "Lim칩n",
  "Mandarina",
  "Pomelo",
  "Ciruela",
  "Guayaba",
  "Frambuesa",
  "Coco",
  "Papaya",
  "Granada",
  "Mora",
  "Lichi",
  "Maracuy치",
  "Melocot칩n",
  "Higo",
  "Morera",
  "Acerola",
  "Grosella",
  "Zarzamora",
  "Carambola",
  "Pitahaya",
  "Guan치bana",
  "Cactus",
  "N칤spero",
  "Pepino",
  "Pepino de mar",
  "Pera espinosa",
  "Caqui",
  "An칩n",
  "Chirimoya",
  "Rambut치n",
  "Tamarindo",
  "Mangost치n",
  "Lulo",
  "Zapote",
  "Cereza de Barbados",
  "Mamey",
  "Guayaba de Costa Rica",
  "Ar치ndano",
  "Frambuesa negra",
  "Huckleberry",
  "Grosella negra",
  "Guinda",
  "Acerola",
  "N칤spero",
  "Chabacano",
  "Nectarina",
  "Carambola",
  "Cereza de invierno",
  "Feijoa",
  "Uchuva",
  "Membrillo",
  "Guava",
  "Mandarina Clementina",
  "Pera asi치tica",
  "Granadilla",
  "Pomelo rosa",
  "Pera de agua",
  "Mango verde",
  "Lima",
  "Grosella espinosa",
  "Caqui persim칩n",
  "Ar치ndano rojo",
  "Lima kaffir",
  "Baya de sa칰co",
  "Frambuesa dorada",
  "Grosella dorada",
  "Mel칩n piel de sapo",
  "Lima persa",
  "Mora de Logan",
  "Grosella blanca",
  "Chirimoya",
  "Naranjilla",
  "Zapote negro",
  "Mel칩n calame침o",
  "Lima de los c칤tricos",
  "Mora de Boysen",
  "Membrillo chino",
  "Mamey sapote",
  "Kiwi dorado",
  "Tamarillo",
  "Grosella china",
  "Ciruela claudia",
  "Lima de hierba",
  "Marula",
  "Mango de az칰car",
  "Membrillo japon칠s",
  "Mora silvestre",
];

function impresoraDeFrutitas(array1) {
  const citricos = [];
  const lasQueMeGustan = [];
  for (let i = 0; i < array1.length; i++) {
    if (
      array1[i].includes("Naranja") ||
      array1[i].includes("Lim칩n") ||
      array1[i].includes("Pomelo") ||
      array1[i].includes("Lima")
    ) {
      citricos.push(array1[i]);
    } else if (
      array1[i].includes("Marula") ||
      array1[i].includes("Chirimoya") ||
      array1[i] === "Mango"
    ) {
      lasQueMeGustan.push(array1[i]);
    }
  }
  const misFrutas = {
    citricos,
    lasQueMeGustan,
  };
  return misFrutas;
}

//Hacer un array con algunos personajes de the office y que se impriman con un loop un console.log de cada uno que diga
//el personaje es "Nombre del perssonae" SI TENES BOLAS, hace que cuando salga Toby el mensaje sea estas despedido.

const theOffice = [
  "michael",
  "pam",
  "jim",
  "dwight",
  "toby",
  "angela",
  "ryan",
  "kevin",
  "oscar",
  "kelly",
  "meredith",
];
function personajesAMostrar(array) {
  for (let i = 0; i < array.length; i++) {
    if (array[i] === "toby") {
      console.log(`estas despedido ${array[i]}`);
    } else if (array[i] === "kelly" || array[i] === "ryan") {
      console.log(`que personaje pesado es ${array[i]}`);
    } else {
      console.log(`nombre de personaje: ${array[i]}`);
    }
  }
}

//personajesAMostrar(theOffice);

//Hacer otro array con personajes de la vida real que dibella conozca, que se impriman en el conssole log y diga la persona es y su nombre ademas SI TENES BOLAS que las personas que tengan Vodopivec en su nombre se pusheen a un array de Vodopivecs.

const conocidos = [
  "gabriel cabrera",
  "matias angulegui echarri",
  "tamara vodopivec",
  "nicolas vodopivec",
  "rocio vodopivec",
  "sonia casco",
  "carlos vodopivec",
  "nayla vodopivec",
  "camila vodopivec",
  "isaias noche",
  "benjamin shjadksj",
  "claudio angulegui echarri",
  "nadia colaprisca",
  "benjamin maldonado",
  "vex vodopivec",
];
function impresivec(arraivec) {
  const vodopivecs = [];
  for (let i = 0; i < arraivec.length; i++) {
    console.log(`la persona es: ${arraivec[i]}`);
    if (arraivec[i].includes("vodopivec")) {
      vodopivecs.push(arraivec[i]);
    }
  }
  return vodopivecs;
}

const vodos = impresivec(conocidos);
console.log(vodos);

//Los numeros que dividido 2 dan resto 0 son pares, sino son impares

const arrayDeNumeros = [
  5, 8, 4, 6, 10, 20, 11, 15, 18, 19, 22, 456, 13, 17, 199,
];

function impresoraDeNumeros(array) {
  const numerosPares = [];
  const numerosImpares = [];
  for (let i = 0; i < array.length; i++) {
    if (array[i] % 2 === 0) {
      numerosPares.push(array[i]);
    } else {
      numerosImpares.push(array[i]);
    }
  }
  let paqueteDeNumeros = [numerosImpares, numerosPares];
  return paqueteDeNumeros;
}

const arrayDePares = impresoraDeNumeros(arrayDeNumeros)[1];
console.log(arrayDePares);

//FUNCION FLECHA//

const saluditos = function () {
  console.log("oda");
};
saluditos();

const saluditos1 = () => {
  console.log("oda");
};
saluditos1();

const saluditos2 = (nombre) => console.log(`oda ${nombre}`);
saluditos2("matias");

const obj = {
  name: "John",
  sayHello: () => {
    console.log(`Hello, ${obj.name}!`); // `this` se refiere al objeto `obj`

    const innerArrow = () => {
      console.log(`Hola, ${obj.name}!`); // `this` tambi칠n se refiere al objeto `obj`
    };

    innerArrow();
  },
};

obj.sayHello(); // Salida: Hello, John! \n Hola, John!

//POO
/* 
Clases - Modelo a seguir
Objetos - Instancia de una CLASE-
  Atributos - Es una caracteristica o propiedad del objeto (son variables dentro de un objeto)
  Metodos - Son las acciones que un objeto puede realizar (funciones dentro de un objeto)
*/

function CyberWareConstructor(name, bodypart, price, functionality) {
  //ATRIBUTOS, VARIABLES DENTRO DE OBJETOS
  this.name = name;
  this.bodypart = bodypart;
  this.price = price;
  this.functionality = functionality;
}
// FUNCIONES METODO COMPARTIDO EVITANDO EL DESPERDICIO DE RECURSOS
CyberWareConstructor.prototype.call = function () {
  console.log(
    `item_selected: ${this.name} - bodypart: ${this.bodypart} - price: ${this.price} - ${this.functionality}`
  );
};
CyberWareConstructor.prototype.slots = function () {
  if (this.bodypart === null) {
    console.log(`Your slot is empty.`);
  } else {
    console.log(`You need an empty space in the ${this.bodypart} slot.`);
  }
};

const item01 = new CyberWareConstructor(
  "sandevistan",
  "column",
  28000,
  "upgrade"
);
const item02 = new CyberWareConstructor("mantis_blades", null, 16000, "weapon");

item01.call();
item02.call();
item01.slots();
item02.slots();

/*CONSTRUCTOR*/
function AnimalCreator(especie, edad, sonido) {
  this.especie = especie;
  this.edad = edad;
  this.sonido = sonido;
}
/*METODOS PARA EL CONSTRUCTOR*/
AnimalCreator.prototype.hablar = function () {
  console.log(this.sonido);
};

/*HERENCIA PROTOTIPICA*/
function CatCreator(especie, edad, sonido, raza) {
  this.super = AnimalCreator;
  this.super(especie, edad, sonido);
  this.raza = raza;
}

/*CAT CREATOR ESTA HEREDANDO EL PROTOTIPO DE ANIMAL CREATOR*/
CatCreator.prototype = new AnimalCreator();
CatCreator.prototype.constructor = CatCreator;

/*CREACIONES*/
const perro = new AnimalCreator("canino", 2, "Guauu Guauu");
const sphynxCat = new CatCreator("felino", 4, "Miaauuu", "Sphynx");
console.log(sphynxCat);
sphynxCat.hablar();

//Funcion Constructora
function HumanCreator(etnia, edad) {
  this.etnia = etnia;
  this.edad = edad;
}
//Agregando Metodos al Prototipo
HumanCreator.prototype.respiracion = function () {
  console.log("Estoy respirando, soy un humano");
};
//Creando un nuevo humano
const humano1 = new HumanCreator("Africana", 33);
console.log(humano1);
humano1.respiracion();
//Creando un nuevo Asiatico el cual hereder치 las propiedades, metodos y el prototipo de HumanCreator
function AsianCreator(etnia, edad, pais) {
  this.super = HumanCreator;
  this.super(etnia, edad);
  this.pais = pais;
}
//Aclaramos que el prototypo de AsianCreator va a ser una nueva instancia de HumanCreator
AsianCreator.prototype = new HumanCreator();
//Especificamos que el constructor va a ser AsianCreator porque de lo contrario heredaria el constructor de HumanCreator
AsianCreator.prototype.constructor = AsianCreator;

//Agregamos nuevo metodo al prototipo AsianCreator
AsianCreator.prototype.soyAsiatico = function () {
  console.log(`Vengo de ${this.pais}`);
};

const japones1 = new AsianCreator("asiatico", 40, "Japon, Osaka");
console.log(japones1);

japones1.respiracion();
japones1.soyAsiatico();

// Nueva funci칩n constructora basada en AsianCreator
function KoreanCreator(pais, ciudad) {
  this.super = AsianCreator;
  this.super("asi치tico", 30, pais);
  this.ciudad = ciudad;
}

// Herencia del prototipo de AsianCreator
KoreanCreator.prototype = new AsianCreator();
KoreanCreator.prototype.constructor = KoreanCreator;

// Nuevo m칠todo espec칤fico de KoreanCreator
KoreanCreator.prototype.soyCoreano = function () {
  console.log("Soy coreano de " + this.ciudad);
};

// Crear una instancia de KoreanCreator
const coreano1 = new KoreanCreator("Corea del Sur", "Se칰l");
console.log(coreano1);

coreano1.respiracion(); // M칠todo heredado de HumanCreator a trav칠s de AsianCreator
coreano1.soyAsiatico(); // M칠todo heredado de AsianCreator
coreano1.soyCoreano(); // M칠todo espec칤fico de KoreanCreator

//CREANDO UNA CELULA
function LifeGenerator(cells, age) {
  this.cells = cells;
  this.age = age;
}

LifeGenerator.prototype.respirando = function () {
  console.log(`Soy un organismo ${this.cells}, estoy respirando`);
};

const vida1 = new LifeGenerator("pluricelular", 0);
console.log(vida1);
vida1.respirando();

//CREANDO UN PRIMATE
function EvolveGenerator(cells, age, specie) {
  this.super = LifeGenerator;
  this.super(cells, age);
  this.specie = specie;
}

EvolveGenerator.prototype = new LifeGenerator();
EvolveGenerator.prototype.constructor = EvolveGenerator;
EvolveGenerator.prototype.action = function () {
  console.log(`Paso tiempo, pude evolucionar, mi especie es ${this.specie}`);
};

const animal1 = new EvolveGenerator("pluricelular", 7, "primate");
console.log(animal1);
animal1.respirando();
animal1.action();

//CREANDO UN HUMANO
function BecomeHuman(cells, age, specie, skill) {
  this.super = EvolveGenerator;
  this.super(cells, age, specie);
  this.skill = skill;
}

BecomeHuman.prototype = new EvolveGenerator();
BecomeHuman.prototype.constructor = BecomeHuman;
BecomeHuman.prototype.skilling = function () {
  console.log(
    `Mi evoluci칩n transcurre muy r치pido, ahora que soy ${this.specie} soy capaz de ${this.skill}`
  );
};

const human1 = new BecomeHuman("pluricelular", 40, "humano", "hacer fuego");
console.log(human1);
human1.respirando();
human1.action();
human1.skilling();

//CREANDO UN CYBORG

function BecomeCyborg(cells, age, specie, skill, skill2) {
  this.super = BecomeHuman;
  this.super(cells, age, specie, skill);
  this.skill2 = skill2;
}

BecomeCyborg.prototype = new BecomeHuman();
BecomeCyborg.prototype.constructor = BecomeCyborg;
BecomeCyborg.prototype.newskill = function () {
  console.log(
    `La evoluci칩n no se detuvo aparentemente ahora soy un ${this.specie} y soy capaz de ${this.skill2}`
  );
};

const cyborg1 = new BecomeCyborg(
  "pluricelular",
  65,
  "cyborg",
  "hacer fuego",
  "ralentizar el tiempo"
);
console.log(cyborg1);
cyborg1.respirando();
cyborg1.action();
cyborg1.skilling();
cyborg1.newskill();

//CREANDO UNA M츼QUINA

function BecomeMachine(cells, age, specie, skill, skill2, final) {
  this.super = BecomeCyborg;
  this.super(cells, age, specie, skill, skill2);
  this.final = final;
}

BecomeMachine.prototype = new BecomeCyborg();
BecomeMachine.prototype.constructor = BecomeMachine;
BecomeMachine.prototype.theEnd = function () {
  console.log(
    `Parece que hasta ac치 lleg칩 mi evoluci칩n, hace tiempo que no necesito ${this.skill} o ${this.skill2}... Termine siendo ${this.specie} y soy capaz de ${this.final}, hasta la pr칩xima :)`
  );
};

const machine1 = new BecomeMachine(
  "pluricelular",
  100,
  "maquina",
  "hacer fuego",
  "ralentizar el tiempo",
  "lo que sea"
);
console.log(machine1);
machine1.respirando();
machine1.action();
machine1.skilling();
machine1.newskill();
machine1.theEnd();

//////////////////////CLASSES Y HERENCIA DE CLASSES /////////////

class Celula {
  constructor(nombre, organismo) {
    this.nombre = nombre;
    this.organismo = organismo;
  }
  vivir(){
    console.log(`Mi nombre es ${this.nombre} y soy un/a ${this.organismo}`)
  }
}

const vidaX = new Celula ("Dwight", "Celula")
console.log(vidaX)
vidaX.vivir()